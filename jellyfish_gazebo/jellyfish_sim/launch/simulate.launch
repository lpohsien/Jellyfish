<?xml version="1.0"?>

<launch>
    <!--Arguments for simulator setup-->
    <arg name="is_SITL" default="true"/>
    <arg name="use_basic_controller" default="true"/>
    <arg name="world" default="$(find jellyfish_sim)/worlds/jellyfish.world"/> 
    <arg name="attitude_controller_parameters" default="$(find jellyfish_sim)/resources/attitude_controller_parameters.yaml"/>
    <arg name="drone_parameters" default="$(find jellyfish_sim)/resources/dji_m210_vehicle_parameters.yaml"/>

    <!--Arguments for spawning drone-->
    <arg name="drone_name" default="dji_m210"/>
    <arg name="initial_drone_x" default="0"/>
    <arg name="initial_drone_y" default="0"/>
    <arg name="initial_drone_z" default="0.05"/>
    <arg name="initial_drone_roll" default="0"/>
    <arg name="initial_drone_pitch" default="0"/>
    <arg name="initial_drone_yaw" default="0"/>

    <!--Arguments for spawning landing platform-->
    <arg name="landing_platform_name" default="landing_platform"/>
    <arg name="landing_platform_model" default="$(find jellyfish_sim)/URDF/basic_tag.xacro"/>
    <arg name="initial_platform_x" default="3"/>
    <arg name="initial_platform_y" default="3"/>
    <arg name="initial_platform_z" default="0"/>
    <arg name="initial_platform_yaw" default="0.0" />
    <arg name="platform_world_frame" default="/world"/>

    <!--Spawn world-->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world)"/> 
    </include>
    
    <!--Spawn landing platform-->
    <group ns="$(arg landing_platform_name)">
        <include file="$(find jellyfish_sim)/launch/spawn_landing_platform.launch" >
            <arg name="name" value="$(arg landing_platform_name)"/>
            <arg name="model" value="$(arg landing_platform_model)"/>
            <arg name="x" value="$(arg initial_platform_x)"/>
            <arg name="y" default="$(arg initial_platform_y)"/>
            <arg name="z" default="$(arg initial_platform_z)"/>
            <arg name="yaw"   default="$(arg initial_platform_yaw)" />
            <arg name="world_frame" default="$(arg platform_world_frame)"/>
            <arg name="drone_name" default="$(arg drone_name)"/>
        </include>
    </group>

    <!--Spawn drone-->
    <group ns="$(arg drone_name)">
        <include file="$(find jellyfish_sim)/launch/spawn_dji_m210.launch" >
            <arg name="is_SITL" value="$(arg is_SITL)"/>
            <arg name="name" value="$(arg drone_name)" />
            <arg name="tf_prefix" value="$(arg drone_name)" />
            <arg name="x" value="$(arg initial_drone_x)" />
            <arg name="y" value="$(arg initial_drone_y)" />
            <arg name="z" value="$(arg initial_drone_z)" />
            <arg name="roll"  value="$(arg initial_drone_roll)" />
            <arg name="pitch" value="$(arg initial_drone_pitch)" />
            <arg name="yaw"   value="$(arg initial_drone_yaw)" />           
        </include>
        <rosparam command="load"
                    file="$(find jellyfish_sim)/config/joints.yaml" 
                    ns="gimbal_joint_state_controller" />

        <rosparam command="load"
                    file="$(find jellyfish_sim)/config/gimbal_pitch.yaml"
                    ns="gimbal_pitch_controller" />
            
        <rosparam command="load"
                    file="$(find jellyfish_sim)/config/gimbal_roll.yaml"
                    ns="gimbal_roll_controller" />

        <rosparam command="load"
                    file="$(find jellyfish_sim)/config/gimbal_yaw.yaml"
                    ns="gimbal_yaw_controller" />


        <node name="gimbal_controller_spawner" pkg="controller_manager" type="spawner"
                args="gimbal_joint_state_controller
                    gimbal_pitch_controller
                    gimbal_roll_controller
                    gimbal_yaw_controller"/>

        <!--Spawn relavant nodes-->
        <group if="$(arg is_SITL)">
            <group if="$(arg use_basic_controller)">
                <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
                    <rosparam command="load" file="$(arg attitude_controller_parameters)" />
                    <rosparam command="load" file="$(arg drone_parameters)" />
                    <remap from="odometry" to="ground_truth/odometry" />
                </node>
            </group>
            <node pkg="jellyfish_sim" name="gazebo_drone_movement" type="gazebo_drone_movement.py" respawn="false" output="screen"/>
        </group>
    </group>
</launch>